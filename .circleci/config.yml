version: 2.1
description: Trains ci workflow
jobs:
    python3_7:
      docker:
          - image: python:3.7.4-stretch
      working_directory: ~/repo
      steps:
          # Step 1 : checkout source code to working directory
          - checkout
          # Step 2: create virtual env and install dependencies
          - run:
              name: install dependencies
              command: |
                python3 -m venv venv
                . venv/bin/activate
                pip install -r requirements.txt
          # Step 3: Run example
          - run:
              name: run example for internal check
              command: |
                . venv/bin/activate
                pip install pandas
                pip install absl-py
                export PYTHONPATH=${PWD}
                cd examples
                python artifacts_toy.py |& tee -a logs.txt
                python hyper_parameters_example.py |& tee -a logs.txt
                python manual_reporting.py |& tee -a logs.txt
          - store_artifacts:
              path: examples/logs.txt

    python3_6:
      docker:
          - image: python:3.6.9-stretch
      working_directory: ~/repo
      steps:
          # Step 1 : checkout source code to working directory
          - checkout
          # Step 2: create virtual env and install dependencies
          - run:
              name: install dependencies
              command: |
                python3 -m venv venv
                . venv/bin/activate
                pip install -r requirements.txt
          # Step 3: Run example
          - run:
              name: run example for internal check
              command: |
                . venv/bin/activate
                pip install pandas
                pip install absl-py
                export PYTHONPATH=${PWD}
                cd examples
                python artifacts_toy.py |& tee -a logs.txt
                python hyper_parameters_example.py |& tee -a logs.txt
                python manual_reporting.py |& tee -a logs.txt

          - store_artifacts:
              path: examples/logs.txt

    python3_5:
      docker:
          - image: python:3.5.7-stretch
      working_directory: ~/repo
      steps:
          # Step 1 : checkout source code to working directory
          - checkout
          # Step 2: create virtual env and install dependencies
          - run:
              name: install dependencies
              command: |
                python3 -m venv venv
                . venv/bin/activate
                pip install -r requirements.txt
          # Step 3: Run example
          - run:
              name: run example for internal check
              command: |
                . venv/bin/activate
                pip install pandas
                pip install absl-py
                export PYTHONPATH=${PWD}
                cd examples
                python artifacts_toy.py |& tee -a logs.txt
                python hyper_parameters_example.py |& tee -a logs.txt
                python manual_reporting.py |& tee -a logs.txt

          - store_artifacts:
              path: examples/logs.txt

    code_style:
      docker:
        - image: python:3.6.9-stretch
      working_directory: ~/repo
      steps:
          - checkout
          - add_ssh_keys:
              fingerprints:
                - "c5:eb:a3:aa:4b:cf:fb:52:9d:05:62:86:7d:73:9c:78"
            # Step 1 : checkout source code to working directory
          - run:
              name: Run code style changes
              command: |
                cd ..
                python3 -m venv venv
                . venv/bin/activate
                cd repo
                pip install black isort
                pip install autopep8==1.4
                isort -rc .
                autopep8 --recursive --in-place --aggressive --aggressive .
                black .
          - run:
              name: Commit and push changes
              command: |
                git config user.email "AutoPEP8@allegro.ai"
                git config user.name "AutoPEP8"
                git status
                git commit -am "[ci skip] AutoPEP8 changes via CircleCI"
                git push --set-upstream origin ${CIRCLE_BRANCH}

#    code_style:
#      docker:
#        - image: circleci/python:3.6.7
#      working_directory: ~/repo
#      steps:
#        # Step 1 : checkout source code to working directory
#        - checkout
#        # Step 2: create virtual env
#        - run:
#            name: create virtual env
#            command: |
#              python3 -m venv venv
#              . venv/bin/activate
#        # Step 3: install flake8
#        - run:
#            name: install flake8
#            command: |
#              . venv/bin/activate
#              pip install flake8
#        # Step 4: Run codestyle
#        - run:
#            name: run flake8
#            command: |
#              . venv/bin/activate
#              flake8 --exclude=venv* trains*

workflows:
  main:
    jobs:
#      - "python3_5"
#      - "python3_6"
#      - "python3_7"
      - "code_style"
